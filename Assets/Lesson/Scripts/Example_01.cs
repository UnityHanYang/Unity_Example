using System.Collections;
using System.Collections.Generic;
using UnityEngine;

#region 유니티 엔진
/*

▶ 메시아: 그 이름은 유니티

 유니티 엔진의 장점

- 멀티 (크로스) 플랫폼 지원
- 통합 개발 환경 지원
- 통합 에셋 관리 시스템 지원
★ 
- 활성화 된 커뮤니티 지원
- 스크립팅 시스템 지원(런타임, 에디터)
- 파티클 시스템 지원
- 2D 시스템 지원 (스프라이트, 타일 맵)
- 랜더링 시스템 지원
- 셰이더 시스템 지원
- 사운드 시스템 지원
- 물리 시스템 지원
- 지형 시스템 지원
- 애니메이션 시스템 지원
- 프로파일링(코드 분석) 시스템 지원
- 에셋 스토어 지원
- 다양한 애니메이션 또한 지원 (레거시 / 메카님)
- 서버에 대한 지식이 빈약해도 네트워크 환경 구축 지원(포톤 / 미러 등)

※ 기본적으로 유니티 엔진은 C# 스크립트를 통해서 컴포넌트 프로그래밍 방식을 지원한다.

※ 유니티는 또한 제로부터 시작해서 완성을 해내가는 구조이기 때문에 입문에 좋고 전체 워크 플로우의 직관성이 좋다.


 유니티의 단점

- 만만히 본다.


▶ 컴포넌트 프로그래밍이란?

- 기존 상속 기반 프로그래밍의 단점을 극복하기 위한 프로그래밍 방식
ㄴ 상속 기반이 물체를 정의한 기능을 확장시켜 나가는 개념을 지닌 것에 비해 컴포넌트 기반 프로그래밍은 기능을
모음으로써 물체를 정의하는 방식으로 접근한다. (이 개념을 덕 타이핑이라고 한다.)

▶ 덕 타이핑 (Duck Typing)
ㄴ 동적 타이핑의 한 종류
ㄴ 객체의 변수 및 메서드의 잡합이 객체의 타입을 결정하는 것을 뜻한다.

 장점

- 기존의 상속 기반 프로그래밍이 변화에 유연하지 못한 반면에 컴포넌트 방식은 기능을 추가함으로써 새로운 객체를
표현하기 때문에 상속 기반 방식보다 좀 더 유연한 클래스 구조를 설계하는 것이 가능하다.


 단점

- 컴포넌트 프로그래밍 방식은 객체를 표현하기 위한 기능, 각 클래스 별로 분산이 되는 경우가 많기 때문에 컴포넌트 간에
서로 협력 관계를 형성하기 위해서는 필연적으로 로직이 필요하다.

- 해당 방식은 상속 기반에 비해서 많은 유연성을 제공하는 반면에 퍼포먼스는 떨어진다는 단점이 있다.

프레임워크 반드시 필요


▷ 유니티에서의 컴포넌트 기반 프로그래밍

- 유니티 엔진인 컨테이너에 해당하는 게임 객체 (GameObject)와 MonoBehaviour 클래스를 통해 컴포넌트 방식을
제어하는 메커니즘을 제공한다.

- 즉 커스텀 스크립트 컴포넌트는 반드시 MonoBehaviour 클래스를 직 / 간접적으로 상속해야지만 해당 스크립트를
유니티 객체 상에 구동시키는 것이 가능하다.

*/
#endregion

public class Example_01 : MonoBehaviour
{
    
    void Start()
    {
        
    }

    void Update()
    {
        
    }
}
